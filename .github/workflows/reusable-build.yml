name: build-ublue
on:
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 40, 41, etc"
        required: true
        type: string
      kernel_flavor:
        description: "The Kernel flavor: main, bazzite, coreos-stable, etc"
        required: true
        type: string
env:
  IMAGE_BASE_NAME: akmods
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}
  cancel-in-progress: true

jobs:
  cache-kernel:
    name: Kernel ${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}
    runs-on: ubuntu-24.04
    env:
      KCWD: /tmp/kernel-cache
      KCPATH: kernel_cache
    outputs:
      KCKEY: ${{ inputs.kernel_flavor }}-${{ steps.kernel-version.outputs.kernel_release }}
      KCWD: ${{ env.KCWD }}
      KCPATH: ${{ env.KCPATH }}
      kernel_build_tag: ${{ steps.kernel-version.outputs.kernel_build_tag }}
      kernel_major_minor_patch: ${{ steps.kernel-version.outputs.kernel_major_minor_patch }}
      KERNEL_VERSION: ${{ steps.kernel-version.outputs.kernel_release }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get Kernel Version
        id: kernel-version
        uses: ./.github/actions/get-kernel-version
        with:
          fedora_version: ${{ inputs.fedora_version }}
          kernel_flavor: ${{ inputs.kernel_flavor }}

      - name: Cache Kernel RPMs
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: ${{ env.KCPATH }}
          key: ${{ inputs.kernel_flavor }}-${{ steps.kernel-version.outputs.kernel_release }} # job outputs KCKEY

      - name: Retrieve Signing Key
        if: steps.cache-kernel.outputs.cache-hit != 'true' && github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'
        shell: bash
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
            echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
            wc -c certs/private_key_2.priv
          fi

      - name: Fetch and Sign Kernel Packages
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_image="quay.io/fedora/fedora:${{ inputs.fedora_version }}"
          podman pull "$build_image"

          mkdir -p ${{ env.KCWD }}
          cp -a fetch-kernel.sh certs ${{ env.KCWD }}

          echo "${{toJSON(steps.kernel-version.outputs)}}"

          container_name="fq-$(uuidgen)"
          podman run \
            --entrypoint /bin/bash \
            --env FEDORA_VERSION=${{ inputs.fedora_version }} \
            --env KERNEL_BUILD_TAG=${{ steps.kernel-version.outputs.kernel_build_tag }} \
            --env KERNEL_VERSION=${{ steps.kernel-version.outputs.kernel_release }} \
            --env KERNEL_FLAVOR=${{ inputs.kernel_flavor }} \
            --env DUAL_SIGN=true \
            --name "$container_name" \
            -v ${{ env.KCWD }}:${{ env.KCWD }}:rw \
            -dt "$build_image"

          podman exec "$container_name" bash -x ${{ env.KCWD }}/fetch-kernel.sh ${{ env.KCWD }}

          find ${{ env.KCWD }}

      - name: Check Secureboot Signatures
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) || ! $(command -v rpm2cpio) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl rpm2cpio
          fi

          cd ${{ env.KCWD }}/rpms
          if [[ "${{ inputs.kernel_flavor }}" == "surface" ]]; then
            rpm2cpio kernel-surface-core-"${{ steps.kernel-version.outputs.kernel_release }}".rpm | cpio -idmv
          else
            rpm2cpio kernel-core-"${{ steps.kernel-version.outputs.kernel_release }}".rpm | cpio -idmv
          fi
          cd ./lib/modules/"${{ steps.kernel-version.outputs.kernel_release }}"/
          sbverify --list vmlinuz
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            curl --retry 3 -#fLo kernel-sign.der https://github.com/ublue-os/akmods/raw/main/certs/public_key.der.test
            curl --retry 3 -#fLo akmods.der https://github.com/ublue-os/akmods/raw/main/certs/public_key_2.der.test
          else
            curl --retry 3 -#fLo kernel-sign.der https://github.com/ublue-os/akmods/raw/main/certs/public_key.der
            curl --retry 3 -#fLo akmods.der https://github.com/ublue-os/akmods/raw/main/certs/public_key_2.der
          fi
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

      - name: Finalize Cache Files
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # this should be in runner user's home dir
          mkdir -p ${{ env.KCPATH }}
          cp -a ${{ env.KCWD }}/rpms/*.rpm ${{ env.KCPATH }}/
          echo "$(date '+%Y%m%d.0')" > ${{ env.KCPATH }}/kernel-cache-date

      - name: List Cached Kernel RPMs
        shell: bash
        run: |
          find ${{ env.KCPATH }}

  build-akmods:
    name: Akmods ${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}-${{ matrix.cfile_suffix }}
    runs-on: ubuntu-24.04 # Work Around Tar Bug
    needs: [cache-kernel]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        kernel_flavor:  # this must be in matrix for excludes, but reference inputs.kernel_flavor in workflow
          - ${{ inputs.kernel_flavor }}
        cfile_suffix:
          - common
          - extra
          - nvidia
          - nvidia-open
          - zfs
        exclude:
          - kernel_flavor: main
            cfile_suffix: zfs
          - kernel_flavor: asus
            cfile_suffix: zfs
          - kernel_flavor: bazzite
            cfile_suffix: zfs
          - kernel_flavor: surface
            cfile_suffix: zfs
    env:
      KCWD: ${{ needs.cache-kernel.outputs.KCWD }}
      KCPATH: ${{ needs.cache-kernel.outputs.KCPATH }}
      kernel_build_tag: ${{ needs.cache-kernel.outputs.kernel_build_tag }}
      KERNEL_VERSION: ${{ needs.cache-kernel.outputs.KERNEL_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create cache parent dir
        shell: bash
        run: |
          mkdir -p ${{ env.KCWD }}

      - name: Cache Kernel RPMs
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: ${{ env.KCPATH }}
          key: ${{ needs.cache-kernel.outputs.KCKEY }}

      - name: Fail Absent Kernel Cache
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          echo "Kernel Cache not found for key: ${{ needs.cache-kernel.outputs.KCKEY }}"
          exit 1

      - name: Get Cached Kernel Date/Version
        shell: bash
        run: |
          set -exo pipefail

          find ${{ env.KCPATH }}
          KCDATE=$(cat ${{ env.KCPATH }}/kernel-cache-date)
          if [ -z "${KCDATE}" ]; then
            echo "kernel-cache-date must not be empty"
          fi
          if [ -z "${{ env.KERNEL_VERSION }}" ]; then
            echo "KERNEL_VERSION must not be empty"
          fi
          KERNEL_IMAGE_VERSION=${{ env.KERNEL_VERSION }}-${KCDATE}
          echo "KERNEL_IMAGE_VERSION=$KERNEL_IMAGE_VERSION" >> $GITHUB_ENV

      - name: Matrix Variables
        shell: bash
        run: |
          if [ "common" == "${{ matrix.cfile_suffix }}" ]; then
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}-${{ matrix.cfile_suffix }}" >> $GITHUB_ENV
          fi
          export BUILDER_IMAGE=quay.io/fedora/fedora
          echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> $GITHUB_ENV

      - name: Pull build image
        shell: bash
        run: podman pull ${{ env.BUILDER_IMAGE }}:${{ inputs.fedora_version }}

      - name: AppArmor Disable
        run: |
          set -x
          systemctl status apparmor
          sudo systemctl stop apparmor
          systemctl status apparmor || true

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ inputs.kernel_flavor }}-${{ inputs.fedora_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          BUILD_TAGS=("${VARIANT}" "${VARIANT}-${TIMESTAMP}" "${VARIANT}-${KERNEL_VERSION}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              default_tag=${COMMIT_TAGS[0]}
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              default_tag=${BUILD_TAGS[0]}
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          echo "default_tag=$default_tag" >> $GITHUB_ENV

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_BASE_NAME }}
            org.opencontainers.image.description=A caching layer for pre-built akmod RPMs
            org.opencontainers.image.version=${{ env.KERNEL_IMAGE_VERSION }}
            ostree.linux=${{ env.KERNEL_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/1728152?s=200&v=4

      - name: Retrieve Signing Key
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'
        shell: bash
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
            echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
            wc -c certs/private_key_2.priv
          fi

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile.${{ matrix.cfile_suffix }}
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            KERNEL_FLAVOR=${{ inputs.kernel_flavor }}
            FEDORA_MAJOR_VERSION=${{ inputs.fedora_version }}
            RPMFUSION_MIRROR=${{ vars.RPMFUSION_MIRROR }}
            DUAL_SIGN=true
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Build Test Image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile.test
          image: akmods-test
          tags: latest
          build-args: |
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            KERNEL_FLAVOR=${{ inputs.kernel_flavor }}
            FEDORA_MAJOR_VERSION=${{ inputs.fedora_version }}
            INPUT_AKMODS=${{ env.IMAGE_NAME }}
            INPUT_TAG=${{ env.default_tag }}
            DUAL_SIGN=true
          oci: false

      - name: Test Akmods Signature
        id: test_akmods
        shell: bash
        run: |
          if ! podman run akmods-test:latest; then
              echo "Signatures Failed"
              exit 1
          fi

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.8.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.8.1
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.fedora_version }}-${{ inputs.kernel_flavor}} builds successful
    runs-on: ubuntu-latest
    needs: [build-akmods]
    steps:
      - name: Exit on failure
        if: ${{ needs.build-akmods.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
