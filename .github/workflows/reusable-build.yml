name: build-ublue
on:
  workflow_call:
    inputs:
      akmods_target:
        description: "The akmods to build: common, extra, zfs, nvidia, nvidia-open"
        required: true
        type: string
      bazzite_tag:
        description: "The release tag for the bazzite kernel"
        required: false
        type: string
      kernel_flavor:
        description: "The Kernel flavor: main, bazzite, coreos-stable, centos-hsk, longterm-6.12, etc"
        required: true
        type: string
      version:
        description: "Release Version: 10, 41, 42, etc"
        required: true
        type: string
      kernel_cache_key:
        description: "The Key for the Kernel Cache"
        required: true
        type: string
      json_b64:
        description: "base64 encoded json version"
        required: true
        type: string
env:
  AKMODS_BAZZITE_TAG: ${{ inputs.bazzite_tag }}
  AKMODS_KERNEL: ${{ inputs.kernel_flavor }}
  AKMODS_TARGET: ${{ inputs.akmods_target }}
  AKMODS_VERSION: ${{ inputs.version }}
  IMAGE_BASE_NAME: akmods
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  JSON_B64: ${{ inputs.json_b64 }}
  KCKEY: ${{ inputs.kernel_cache_key }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.version }}-${{ inputs.kernel_flavor }}-${{ inputs.akmods_target }}
  cancel-in-progress: true

jobs:
  build-akmods:
    name: ${{ inputs.kernel_flavor }}-${{ inputs.version }}
    runs-on: ubuntu-24.04
    container:
      image: "ghcr.io/ublue-os/devcontainer:latest"
      options: "--privileged --volume /var/lib/containers:/var/lib/containers --security-opt seccomp=unconfined --security-opt label=disable --user 0:0"
    steps:
      - name: Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Mark Directory as Safe
        run: git config --system --ad safe.directory "$GITHUB_WORKSPACE"

      - name: Reconstruct JSON
        run: |
          mkdir -p $(echo $JSON_B64 | base64 -d  | jq -r '.KCPATH')
          base64 -d $JSON_B64 > "$(dirname $(echo $JSON_B64 | base64 -d | jq -r '.KCWD'))/cache.json"
        
      - name: Get KCPATH
        id: kcpath
        run: echo "KCPATH=$(echo $JSON_B64 | base64 -d | jq -r '.KCPATH')" >> "$GITHUB_OUTPUT"

      - name: Cache Kernel RPMs
        if: contains(fromJSON('["schedule", "workflow_dispatch", "merge_group"]'), github.event_name)
        id: cache-kernel
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ steps.kcpath.outputs.KCPATH }}
          key: ${{ inputs.kernel_cache_key }}

      - name: Fail Absent Kernel Cache
        if: contains(fromJSON('["schedule", "workflow_dispatch", "merge_group"]'), github.event_name) && steps.cache-kernel.outputs.cache-hit != 'true'
        run: "echo 'Kernel Cache not found for key: ${{ inputs.kernel_cache_key }}'; exit 1"

      - name: Retrieve Signing Key
        if: contains(fromJson('["schedule", "workflow_dispatch", "merge_group"]'), github.event_name)
        shell: bash
        run: |
          mkdir -p certs
          echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
          echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
          # DEBUG: get character count of key
          wc -c certs/private_key.priv
          wc -c certs/private_key_2.priv
        
      - name: Get Kernel RPMs for PR
        if: github.event_name == 'pull_request'
        run: just fetch-kernel

      - name: Build Image
        run: just build

      # - name: Build Test Image
      #   uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
      #   with:
      #     containerfiles: |
      #       ./Containerfile.test
      #     image: akmods-test
      #     tags: latest
      #     build-args: |
      #       BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
      #       KERNEL_FLAVOR=${{ inputs.kernel_flavor }}
      #       FEDORA_MAJOR_VERSION=${{ inputs.fedora_version }}
      #       RPMFUSION_MIRROR=${{ vars.RPMFUSION_MIRROR }}
      #       INPUT_AKMODS=${{ env.IMAGE_NAME }}
      #       INPUT_TAG=${{ env.default_tag }}
      #       DUAL_SIGN=true
      #     oci: false

      # - name: Test Akmods Signature
      #   id: test_akmods
      #   shell: bash
      #   run: |
      #     if ! podman run akmods-test:latest; then
      #         echo "Signatures Failed"
      #         exit 1
      #     fi

  check:
    name: Check all ${{ inputs.version }}-${{ inputs.kernel_flavor}}-${{ inputs.akmods_target }} builds successful
    runs-on: ubuntu-latest
    needs: [build-akmods]
    steps:
      - name: Exit on failure
        if: ${{ needs.build-akmods.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
