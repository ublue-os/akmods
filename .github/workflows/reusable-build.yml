name: build-ublue
on:
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 40, 41, etc"
        required: true
        type: string
      kernel_flavor:
        description: "The Kernel flavor: main, bazzite, coreos-stable, etc"
        required: true
        type: string
env:
  IMAGE_BASE_NAME: akmods
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}
  cancel-in-progress: true

jobs:
  cache-kernel:
    name: Prime kernel cache for ${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        kernel_flavor:
          - ${{ inputs.kernel_flavor }}
        exclude:
          - fedora_version: 40
            kernel_flavor: asus
          - fedora_version: 40
            kernel_flavor: bazzite

    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Pull Image
        uses: Wandalen/wretry.action@v3.7.3
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            build_image="quay.io/fedora/fedora:${{ matrix.fedora_version }}"
            echo "build_image=$build_image" >> "$GITHUB_ENV"
            podman pull "$build_image"

      - name: Get Kernel Version
        id: Version
        uses: Wandalen/wretry.action@v3.7.3
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            if [[ ${{ matrix.kernel_flavor }} =~ asus|fsync|fsync-ba|surface ]]; then
              container_name="fq-$(uuidgen)"
              dnf="podman exec $container_name dnf"

              podman run --entrypoint /bin/bash --name "$container_name" -dt "${{ env.build_image }}"
              $dnf install -y dnf-plugins-core
            fi

            coreos_kernel () {
              coreos_version=${1}
              image_linux=$(skopeo inspect docker://quay.io/fedora/fedora-coreos:${coreos_version} | jq -r '.Labels["ostree.linux"]')
              # Pin a kernel here, gross workaround TODO: Make this cleaner
              # if [[ "${{ matrix.kernel_flavor }}" == "coreos-stable" ]]; then
              #    image_linux="6.11.3-300.fc41.x86_64"
              # fi
              major_minor_patch=$(echo $image_linux | grep -oP '^\d+\.\d+\.\d+')
              kernel_rel_part=$(echo $image_linux | grep -oP '^\d+\.\d+\.\d+\-\K([123][0]{2})')
              arch=$(echo $image_linux | grep -oP 'fc\d+\.\K.*$')

              kernel_rel="$kernel_rel_part.fc${{ matrix.fedora_version }}"
              kernel_version="$major_minor_patch-$kernel_rel.$arch"
              URL="https://kojipkgs.fedoraproject.org/packages/kernel/"$major_minor_patch"/"$kernel_rel"/"$arch"/kernel-"$kernel_version".rpm"
              echo "Querying koji for ${coreos_version} kernel: $kernel_version"
              echo "$URL"
              HTTP_RESP=$(curl -sI "$URL" | grep ^HTTP)
              linux=""
              if grep -qv "200 OK" <<< "${HTTP_RESP}"; then
                echo "Koji failed to find $coreos_version kernel: $kernel_version"
                case "$kernel_rel_part" in
                  "300")
                    kernel_rel_part="200"
                    ;;
                  "200")
                    kernel_rel_part="100"
                    ;;
                  "100")
                    ;;
                  *)
                    echo "unexpected kernel_rel_part ${kernel_rel_part}"
                    ;;
                esac
                kernel_rel="$kernel_rel_part.fc${{ matrix.fedora_version }}"
                kernel_version="$major_minor_patch-$kernel_rel.$arch"
                URL="https://kojipkgs.fedoraproject.org/packages/kernel/"$major_minor_patch"/"$kernel_rel"/"$arch"/kernel-"$kernel_version".rpm"
                echo "Re-querying koji for ${coreos_version} kernel: $kernel_version"
                echo "$URL"
                HTTP_RESP=$(curl -sI "$URL" | grep ^HTTP)
                if grep -qv "200 OK" <<< "${HTTP_RESP}"; then
                  echo "Koji failed to find $coreos_version kernel: $kernel_version"
                fi
              fi
              if grep -q "200 OK" <<< "${HTTP_RESP}"; then
                linux=$kernel_version
              fi
            }

            case ${{ matrix.kernel_flavor }} in
              "asus")
                $dnf copr enable -y lukenukem/asus-kernel
                linux=$($dnf repoquery --repoid copr:copr.fedorainfracloud.org:lukenukem:asus-kernel --whatprovides kernel | sort -V | tail -n1 | sed 's/.*://')
                ;;
              "fsync")
                $dnf copr enable -y sentry/kernel-fsync
                linux=$($dnf repoquery --repoid copr:copr.fedorainfracloud.org:sentry:kernel-fsync --whatprovides kernel | sort -V | tail -n1 | sed 's/.*://')
                ;;
              "fsync-ba")
                $dnf copr enable -y sentry/kernel-ba
                linux=$($dnf repoquery --repoid copr:copr.fedorainfracloud.org:sentry:kernel-ba --whatprovides kernel | sort -V | tail -n1 | sed 's/.*://')
                ;;
              "bazzite")
                latest="$(curl "https://api.github.com/repos/hhd-dev/kernel-bazzite/releases/latest" )"
                linux=$(echo -E "$latest" | jq -r '.assets[].name' | grep -E 'kernel-.*.rpm' | grep "fc${{ matrix.fedora_version }}.x86_64" | head -1 | sed "s/kernel-//g" | sed "s/.rpm//g" )
                build_tag=$(echo -E $latest | jq -r '.tag_name')
                ;;
              "surface")
                if [[ "${{ matrix.fedora_version }}" < 41 ]]; then
                $dnf config-manager --add-repo=https://pkg.surfacelinux.com/fedora/linux-surface.repo
                else
                $dnf config-manager addrepo --from-repofile=https://pkg.surfacelinux.com/fedora/linux-surface.repo
                fi
                linux=$($dnf repoquery --repoid linux-surface --whatprovides kernel-surface | sort -V | tail -n1 | sed 's/.*://')

                ;;
              "main")
                base_image_name="base"
                if [[ ${{ matrix.fedora_version }} > 40 ]]; then
                  base_image_name+="-atomic"
                fi
                linux=$(skopeo inspect docker://quay.io/fedora-ostree-desktops/$base_image_name:${{ matrix.fedora_version }} | jq -r '.Labels["ostree.linux"]' )
                ;;
              "coreos-stable")
                coreos_kernel stable
                ;;
              "coreos-testing")
                coreos_kernel testing
                ;;
              *)
                echo "unexpected kernel_flavor '${{ matrix.kernel_flavor }}' for query"
                ;;
              esac
              if [ -z "$linux" ] || [ "null" = "$linux" ]; then
                echo "inspected image linux version must not be empty or null"
                exit 1
              fi
              major=$(echo "$linux" | cut -d '.' -f 1)
              minor=$(echo "$linux" | cut -d '.' -f 2)
              patch=$(echo "$linux" | cut -d '.' -f 3)
              kernel_major_minor_patch="${major}.${minor}.${patch}"
              echo "Kernel Version is ${linux}"
              echo "kernel_release=${linux}" >> $GITHUB_ENV
              echo "kernel_build_tag=${build_tag}" >> $GITHUB_ENV
              echo "kernel_major_minor_patch=${kernel_major_minor_patch}" >> $GITHUB_ENV

      - name: Retrieve Signing Key
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'
        shell: bash
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
            echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
            wc -c certs/private_key_2.priv
          fi

      - name: Fetch and Sign Kernel Packages
        id: build_image
        shell: bash
        run: |
          export FEDORA_VERSION=${{ matrix.fedora_version }}
          export KERNEL_VERSION=${{ env.kernel_release }}
          export KERNEL_BUILD_TAG=${{ env.kernel_build_tag }}
          export KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
          export DUAL_SIGN=true

          cp -a certs /tmp/
          find /tmp

          bash -x ./fetch.sh

          find /tmp/rpms


      - name: Check Secureboot Signatures
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) || ! $(command -v rpm2cpio) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl rpm2cpio
          fi
          #podman create --name "${{ matrix.kernel_flavor}}"-kernel-"$(echo "${{ steps.generate_tags.outputs.alias_tags }}" | cut -d " " -f 1)" "${{ matrix.kernel_flavor}}"-kernel:$(echo "${{ steps.generate_tags.outputs.alias_tags }}" | cut -d " " -f 1) sh
          #podman export "${{ matrix.kernel_flavor}}"-kernel-"$(echo "${{ steps.generate_tags.outputs.alias_tags }}" | cut -d " " -f 1)" > /tmp/"${{ matrix.kernel_flavor}}"-kernel-"$(echo "${{ steps.generate_tags.outputs.alias_tags }}" | cut -d " " -f 1)".tar
          #tar xvf /tmp/"${{ matrix.kernel_flavor}}"-kernel-"$(echo "${{ steps.generate_tags.outputs.alias_tags }}" | cut -d " " -f 1)".tar -C /tmp
          cd /tmp/rpms/
          if [[ "${{ matrix.kernel_flavor }}" == "surface" ]]; then
            rpm2cpio kernel-surface-core-"${{ env.kernel_release }}".rpm | cpio -idmv
          else
            rpm2cpio kernel-core-"${{ env.kernel_release }}".rpm | cpio -idmv
          fi
          cd ./lib/modules/"${{ env.kernel_release }}"/
          sbverify --list vmlinuz
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der.test
            curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der.test
          else
            curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
            curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          fi
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1
          cd $HOME

          find /tmp/rpms/

  build-akmods:
    name: Build kmods for ${{ inputs.fedora_version }}-${{ inputs.kernel_flavor }}
    runs-on: ubuntu-24.04 # Work Around Tar Bug
    needs: [cache-kernel]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        kernel_flavor:
          - ${{ inputs.kernel_flavor }}
        cfile_suffix:
          - common
          - extra
          - nvidia
          - nvidia-open
          - zfs
        exclude:
          - fedora_version: 40
            kernel_flavor: asus
          - fedora_version: 40
            kernel_flavor: bazzite
          - kernel_flavor: main
            cfile_suffix: zfs
          - kernel_flavor: asus
            cfile_suffix: zfs
          - kernel_flavor: bazzite
            cfile_suffix: zfs
          - kernel_flavor: surface
            cfile_suffix: zfs

    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Matrix Variables
        shell: bash
        run: |
          if [ "common" == "${{ matrix.cfile_suffix }}" ]; then
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}-${{ matrix.cfile_suffix }}" >> $GITHUB_ENV
          fi
          export BUILDER_IMAGE=quay.io/fedora/fedora
          echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> $GITHUB_ENV
          echo "FQ_BUILDER_IMAGE=${BUILDER_IMAGE}:${{ matrix.fedora_version }}" >> $GITHUB_ENV
          export KERNEL_IMAGE=${{ matrix.kernel_flavor }}-kernel
          echo "KERNEL_IMAGE=${KERNEL_IMAGE}" >> $GITHUB_ENV
          echo "FQ_KERNEL_IMAGE=${{ env.IMAGE_REGISTRY }}/${KERNEL_IMAGE}:${{ matrix.fedora_version }}" >> $GITHUB_ENV

      - name: AppArmor Disable
        run: |
          set -x
          systemctl status apparmor
          sudo systemctl stop apparmor
          systemctl status apparmor || true

      - name: Pull build images
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base image used for FROM in containerfile so
            # we can retry on that unfortunately common failure case
            podman pull ${{ env.FQ_BUILDER_IMAGE }}
            podman pull ${{ env.FQ_KERNEL_IMAGE }}

      - name: Get current version
        shell: bash
        run: |
          set -eo pipefail

          #skopeo inspect containers-storage:${{ env.FQ_KERNEL_IMAGE }} > kernel.json
          # We SHOULD be able to use container-storage to inspect already pulled image here
          # BUT... ubuntu-24.04 builders prevent with this error:
          #     Error during unshare(...): Operation not permitted
          # I intend to investigate/fix later, but need to move forward
          skopeo inspect docker://${{ env.FQ_KERNEL_IMAGE }} > kernel.json

          linux=$(jq -r '.["Labels"]["ostree.linux"]' kernel.json)
          if [ -z "$linux" ] || [ "null" = "$linux" ]; then
            echo "inspected linux version must not be empty or null"
            exit 1
          fi
          echo "KERNEL_VERSION=$linux" >> $GITHUB_ENV

          img_version=$(jq -r '.["Labels"]["org.opencontainers.image.version"]' kernel.json)
          if [ -z "$img_version" ] || [ "null" = "$img_version" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "KERNEL_IMAGE_VERSION=$img_version" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.kernel_flavor }}-${{ matrix.fedora_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          BUILD_TAGS=("${VARIANT}" "${VARIANT}-${TIMESTAMP}" "${VARIANT}-${KERNEL_VERSION}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              default_tag=${COMMIT_TAGS[0]}
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              default_tag=${BUILD_TAGS[0]}
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          echo "default_tag=$default_tag" >> $GITHUB_ENV

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_BASE_NAME }}
            org.opencontainers.image.description=A caching layer for pre-built akmod RPMs
            org.opencontainers.image.version=${{ env.KERNEL_IMAGE_VERSION }}
            ostree.linux=${{ env.KERNEL_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/1728152?s=200&v=4

      - name: Retrieve Signing Key
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'
        shell: bash
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
            echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
            wc -c certs/private_key_2.priv
          fi

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile.${{ matrix.cfile_suffix }}
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            KERNEL_ORG=${{ github.repository_owner }}
            KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            RPMFUSION_MIRROR=${{ vars.RPMFUSION_MIRROR }}
            DUAL_SIGN=true
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Build Test Image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile.test
          image: akmods-test
          tags: latest
          build-args: |
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            KERNEL_ORG=${{ github.repository_owner }}
            KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            INPUT_AKMODS=${{ env.IMAGE_NAME }}
            INPUT_TAG=${{ env.default_tag }}
            DUAL_SIGN=true
          oci: false

      - name: Test Akmods Signature
        id: test_akmods
        shell: bash
        run: |
          if ! podman run akmods-test:latest; then
              echo "Signatures Failed"
              exit 1
          fi

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.8.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.fedora_version }} builds successful
    runs-on: ubuntu-latest
    needs: [build-akmods]
    steps:
      - name: Exit on failure
        if: ${{ needs.build-akmods.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
