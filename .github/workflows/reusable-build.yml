name: build-ublue
on:
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 39, 40, etc"
        required: true
        type: string
env:
  IMAGE_BASE_NAME: akmods
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}
  cancel-in-progress: true

jobs:
  build_ublue:
    name: akmods
    runs-on: ubuntu-24.04 # Work Around Tar Bug
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        kernel_flavor:
          - main
          - asus
          - fsync
          - surface
          - coreos-stable
          - coreos-testing
        cfile_suffix:
          - common
          - extra
          - nvidia
          - zfs
        exclude:
          - fedora_version: 39
            kernel_flavor: fsync
          - fedora_version: 39
            kernel_flavor: asus
          - fedora_version: 39
            kernel_flavor: coreos-testing
          - kernel_flavor: main
            cfile_suffix: zfs
          - kernel_flavor: asus
            cfile_suffix: zfs
          - kernel_flavor: fsync
            cfile_suffix: zfs
          - kernel_flavor: surface
            cfile_suffix: zfs

    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Matrix Variables
        shell: bash
        run: |
          if [ "common" == "${{ matrix.cfile_suffix }}" ]; then
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ env.IMAGE_BASE_NAME }}-${{ matrix.cfile_suffix }}" >> $GITHUB_ENV
          fi
          export BUILDER_IMAGE=quay.io/fedora/fedora
          echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> $GITHUB_ENV
          echo "FQ_BUILDER_IMAGE=${BUILDER_IMAGE}:${{ matrix.fedora_version }}" >> $GITHUB_ENV
          export KERNEL_IMAGE=${{ matrix.kernel_flavor }}-kernel
          echo "KERNEL_IMAGE=${KERNEL_IMAGE}" >> $GITHUB_ENV
          echo "FQ_KERNEL_IMAGE=${{ env.IMAGE_REGISTRY }}/${KERNEL_IMAGE}:${{ matrix.fedora_version }}" >> $GITHUB_ENV

      - name: AppArmor Disable
        run: |
          set -x
          systemctl status apparmor
          sudo systemctl stop apparmor
          systemctl status apparmor || true

      - name: Pull build images
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base image used for FROM in containerfile so
            # we can retry on that unfortunately common failure case
            podman pull ${{ env.FQ_BUILDER_IMAGE }}
            podman pull ${{ env.FQ_KERNEL_IMAGE }}

      - name: Get current version
        shell: bash
        run: |
          set -eo pipefail

          #skopeo inspect containers-storage:${{ env.FQ_KERNEL_IMAGE }} > kernel.json
          # We SHOULD be able to use container-storage to inspect already pulled image here
          # BUT... ubuntu-24.04 builders prevent with this error:
          #     Error during unshare(...): Operation not permitted
          # I intend to investigate/fix later, but need to move forward
          skopeo inspect docker://${{ env.FQ_KERNEL_IMAGE }} > kernel.json

          linux=$(jq -r '.["Labels"]["ostree.linux"]' kernel.json)
          if [ -z "$linux" ] || [ "null" = "$linux" ]; then
            echo "inspected linux version must not be empty or null"
            exit 1
          fi
          echo "KERNEL_VERSION=$linux" >> $GITHUB_ENV

          img_version=$(jq -r '.["Labels"]["org.opencontainers.image.version"]' kernel.json)
          if [ -z "$img_version" ] || [ "null" = "$img_version" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "KERNEL_IMAGE_VERSION=$img_version" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.kernel_flavor }}-${{ matrix.fedora_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          BUILD_TAGS=("${VARIANT}" "${VARIANT}-${TIMESTAMP}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_BASE_NAME }}
            org.opencontainers.image.description=A caching layer for pre-built akmod RPMs
            org.opencontainers.image.version=${{ env.KERNEL_IMAGE_VERSION }}
            ostree.linux=${{ env.KERNEL_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/1728152?s=200&v=4

      - name: Retrieve Signing Key
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'
        shell: bash
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.KERNEL_PRIVKEY }}" > certs/private_key.priv
            echo "${{ secrets.AKMOD_PRIVKEY_20230518 }}" > certs/private_key_2.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
            wc -c certs/private_key_2.priv
          fi

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile.${{ matrix.cfile_suffix }}
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            KERNEL_ORG=${{ github.repository_owner }}
            KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            RPMFUSION_MIRROR=${{ vars.RPMFUSION_MIRROR }}
            DUAL_SIGN=true
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.5.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.fedora_version }} builds successful
    runs-on: ubuntu-latest
    needs: [build_ublue]
    steps:
      - name: Exit on failure
        if: ${{ needs.build_ublue.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
